// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock_comment is a generated GoMock package.
package mock_comment

import (
	context "context"
	reflect "reflect"

	models "github.com/MaratKamalovPD/o3_test_task/internal/models"
	args "github.com/MaratKamalovPD/o3_test_task/internal/models/args"
	gomock "github.com/golang/mock/gomock"
)

// MockCommentRepository is a mock of CommentRepository interface.
type MockCommentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCommentRepositoryMockRecorder
}

// MockCommentRepositoryMockRecorder is the mock recorder for MockCommentRepository.
type MockCommentRepositoryMockRecorder struct {
	mock *MockCommentRepository
}

// NewMockCommentRepository creates a new mock instance.
func NewMockCommentRepository(ctrl *gomock.Controller) *MockCommentRepository {
	mock := &MockCommentRepository{ctrl: ctrl}
	mock.recorder = &MockCommentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentRepository) EXPECT() *MockCommentRepositoryMockRecorder {
	return m.recorder
}

// CreateComment mocks base method.
func (m *MockCommentRepository) CreateComment(ctx context.Context, comment *models.Comment) (*models.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", ctx, comment)
	ret0, _ := ret[0].(*models.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockCommentRepositoryMockRecorder) CreateComment(ctx, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockCommentRepository)(nil).CreateComment), ctx, comment)
}

// GetCommentsByPost mocks base method.
func (m *MockCommentRepository) GetCommentsByPost(ctx context.Context, postID, num, offset uint) ([]*models.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentsByPost", ctx, postID, num, offset)
	ret0, _ := ret[0].([]*models.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentsByPost indicates an expected call of GetCommentsByPost.
func (mr *MockCommentRepositoryMockRecorder) GetCommentsByPost(ctx, postID, num, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentsByPost", reflect.TypeOf((*MockCommentRepository)(nil).GetCommentsByPost), ctx, postID, num, offset)
}

// MockCommentUsecases is a mock of CommentUsecases interface.
type MockCommentUsecases struct {
	ctrl     *gomock.Controller
	recorder *MockCommentUsecasesMockRecorder
}

// MockCommentUsecasesMockRecorder is the mock recorder for MockCommentUsecases.
type MockCommentUsecasesMockRecorder struct {
	mock *MockCommentUsecases
}

// NewMockCommentUsecases creates a new mock instance.
func NewMockCommentUsecases(ctrl *gomock.Controller) *MockCommentUsecases {
	mock := &MockCommentUsecases{ctrl: ctrl}
	mock.recorder = &MockCommentUsecasesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentUsecases) EXPECT() *MockCommentUsecasesMockRecorder {
	return m.recorder
}

// CreateComment mocks base method.
func (m *MockCommentUsecases) CreateComment(ctx context.Context, args args.CreateCommentArgs) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", ctx, args)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockCommentUsecasesMockRecorder) CreateComment(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockCommentUsecases)(nil).CreateComment), ctx, args)
}

// GetCommentsByPost mocks base method.
func (m *MockCommentUsecases) GetCommentsByPost(ctx context.Context, args args.GetCommentsArgs) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentsByPost", ctx, args)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentsByPost indicates an expected call of GetCommentsByPost.
func (mr *MockCommentUsecasesMockRecorder) GetCommentsByPost(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentsByPost", reflect.TypeOf((*MockCommentUsecases)(nil).GetCommentsByPost), ctx, args)
}
