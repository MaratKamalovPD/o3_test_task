// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock_post is a generated GoMock package.
package mock_post

import (
	context "context"
	reflect "reflect"

	models "github.com/MaratKamalovPD/o3_test_task/internal/models"
	args "github.com/MaratKamalovPD/o3_test_task/internal/models/args"
	gomock "github.com/golang/mock/gomock"
)

// MockPostRepository is a mock of PostRepository interface.
type MockPostRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPostRepositoryMockRecorder
}

// MockPostRepositoryMockRecorder is the mock recorder for MockPostRepository.
type MockPostRepositoryMockRecorder struct {
	mock *MockPostRepository
}

// NewMockPostRepository creates a new mock instance.
func NewMockPostRepository(ctrl *gomock.Controller) *MockPostRepository {
	mock := &MockPostRepository{ctrl: ctrl}
	mock.recorder = &MockPostRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostRepository) EXPECT() *MockPostRepositoryMockRecorder {
	return m.recorder
}

// CreatePost mocks base method.
func (m *MockPostRepository) CreatePost(ctx context.Context, post *models.Post) (*models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", ctx, post)
	ret0, _ := ret[0].(*models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockPostRepositoryMockRecorder) CreatePost(ctx, post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockPostRepository)(nil).CreatePost), ctx, post)
}

// DisableComments mocks base method.
func (m *MockPostRepository) DisableComments(ctx context.Context, postID uint) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableComments", ctx, postID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableComments indicates an expected call of DisableComments.
func (mr *MockPostRepositoryMockRecorder) DisableComments(ctx, postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableComments", reflect.TypeOf((*MockPostRepository)(nil).DisableComments), ctx, postID)
}

// GetPost mocks base method.
func (m *MockPostRepository) GetPost(ctx context.Context, id uint) (*models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPost", ctx, id)
	ret0, _ := ret[0].(*models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPost indicates an expected call of GetPost.
func (mr *MockPostRepositoryMockRecorder) GetPost(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPost", reflect.TypeOf((*MockPostRepository)(nil).GetPost), ctx, id)
}

// GetPosts mocks base method.
func (m *MockPostRepository) GetPosts(ctx context.Context) ([]*models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPosts", ctx)
	ret0, _ := ret[0].([]*models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPosts indicates an expected call of GetPosts.
func (mr *MockPostRepositoryMockRecorder) GetPosts(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPosts", reflect.TypeOf((*MockPostRepository)(nil).GetPosts), ctx)
}

// PostExists mocks base method.
func (m *MockPostRepository) PostExists(ctx context.Context, postID uint) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostExists", ctx, postID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostExists indicates an expected call of PostExists.
func (mr *MockPostRepositoryMockRecorder) PostExists(ctx, postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostExists", reflect.TypeOf((*MockPostRepository)(nil).PostExists), ctx, postID)
}

// MockPostUsecases is a mock of PostUsecases interface.
type MockPostUsecases struct {
	ctrl     *gomock.Controller
	recorder *MockPostUsecasesMockRecorder
}

// MockPostUsecasesMockRecorder is the mock recorder for MockPostUsecases.
type MockPostUsecasesMockRecorder struct {
	mock *MockPostUsecases
}

// NewMockPostUsecases creates a new mock instance.
func NewMockPostUsecases(ctrl *gomock.Controller) *MockPostUsecases {
	mock := &MockPostUsecases{ctrl: ctrl}
	mock.recorder = &MockPostUsecasesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostUsecases) EXPECT() *MockPostUsecasesMockRecorder {
	return m.recorder
}

// CommentsDisabled mocks base method.
func (m *MockPostUsecases) CommentsDisabled(ctx context.Context, postID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommentsDisabled", ctx, postID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommentsDisabled indicates an expected call of CommentsDisabled.
func (mr *MockPostUsecasesMockRecorder) CommentsDisabled(ctx, postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommentsDisabled", reflect.TypeOf((*MockPostUsecases)(nil).CommentsDisabled), ctx, postID)
}

// CreatePost mocks base method.
func (m *MockPostUsecases) CreatePost(ctx context.Context, args args.CreatePostArgs) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", ctx, args)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockPostUsecasesMockRecorder) CreatePost(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockPostUsecases)(nil).CreatePost), ctx, args)
}

// DisableComments mocks base method.
func (m *MockPostUsecases) DisableComments(ctx context.Context, args args.DisableCommentsArgs) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableComments", ctx, args)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableComments indicates an expected call of DisableComments.
func (mr *MockPostUsecasesMockRecorder) DisableComments(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableComments", reflect.TypeOf((*MockPostUsecases)(nil).DisableComments), ctx, args)
}

// GetPost mocks base method.
func (m *MockPostUsecases) GetPost(ctx context.Context, args args.PostArgs) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPost", ctx, args)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPost indicates an expected call of GetPost.
func (mr *MockPostUsecasesMockRecorder) GetPost(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPost", reflect.TypeOf((*MockPostUsecases)(nil).GetPost), ctx, args)
}

// GetPosts mocks base method.
func (m *MockPostUsecases) GetPosts(ctx context.Context) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPosts", ctx)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPosts indicates an expected call of GetPosts.
func (mr *MockPostUsecasesMockRecorder) GetPosts(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPosts", reflect.TypeOf((*MockPostUsecases)(nil).GetPosts), ctx)
}

// PostExists mocks base method.
func (m *MockPostUsecases) PostExists(ctx context.Context, postID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostExists", ctx, postID)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostExists indicates an expected call of PostExists.
func (mr *MockPostUsecasesMockRecorder) PostExists(ctx, postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostExists", reflect.TypeOf((*MockPostUsecases)(nil).PostExists), ctx, postID)
}
